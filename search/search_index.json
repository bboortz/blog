{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Benni's Blog\n\n\nMy private blog which is available at \nhttps://bboortz.github.io\n.\nHere you can find some resources about stuff I am interested in.\n\n\nHow-to contribute?\n\n\nYou want to contribute to my blog in any way? Fixing typos, bugs, etc.\nSimply fork my git repository \nhttps://github.com/bboortz/blog\n, make your changes and create a pull request.\n\n\nSome usefull commands for this blog\n\n\nHow-to run this blog in preview mode?\n\n\nmake site_preview\n\n\n\n\nPoint your browser to \nhttp://localhost:8000\n.\n\n\nHow-to deploy this blog as github page?\n\n\nmake site_deploy\n\n\n\n\nPoint your browser to \nhttps://bboortz.github.io\n.\n\n\nMore Resources\n\n\n\n\nhttps://github.com/bboortz\n\n\nhttps://chaos.social/@bboortz",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-bennis-blog",
            "text": "My private blog which is available at  https://bboortz.github.io .\nHere you can find some resources about stuff I am interested in.",
            "title": "Welcome to Benni's Blog"
        },
        {
            "location": "/#how-to-contribute",
            "text": "You want to contribute to my blog in any way? Fixing typos, bugs, etc.\nSimply fork my git repository  https://github.com/bboortz/blog , make your changes and create a pull request.",
            "title": "How-to contribute?"
        },
        {
            "location": "/#some-usefull-commands-for-this-blog",
            "text": "",
            "title": "Some usefull commands for this blog"
        },
        {
            "location": "/#how-to-run-this-blog-in-preview-mode",
            "text": "make site_preview  Point your browser to  http://localhost:8000 .",
            "title": "How-to run this blog in preview mode?"
        },
        {
            "location": "/#how-to-deploy-this-blog-as-github-page",
            "text": "make site_deploy  Point your browser to  https://bboortz.github.io .",
            "title": "How-to deploy this blog as github page?"
        },
        {
            "location": "/#more-resources",
            "text": "https://github.com/bboortz  https://chaos.social/@bboortz",
            "title": "More Resources"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/",
            "text": "How-to build a simple blog site\n\n\nGoals\n\n\nSetting up a simple blog for myself. Simple means for me small software, not many dependencies, no database.\n\n\nRequirements\n\n\nThe blogging software ...\n\n\n\n\nis easy to build, package and run everywhere. On my local laptop or any server.\n\n\ncan be hostsed locally\n\n\nuses Markdown\n\n\nis able to use themes\n\n\n\n\nInvestigation\n\n\nFirst we are trying to find a suitable blog/wiki software to run our blog. I have tried these solutions:\n\n\n\n\nMDwiki - looks like a good software but installation failed on my pc at least.\n\n\nMkDocs - simple and works like a charm. \n\n\ndokuwiki - good and well maintained software with a big list of plugins but it seems that it does not support plain markdown\n\n\n\n\nAt the end of my investigation choose for MkDocs because it is very simple, meeting my needs and can be configured very simple way.\n\n\nWorkflow\n\n\nPrerequesites\n\n\n\n\nRunning Linux like Ubuntu, Debian, Arch Linux, ...\n\n\n\n\nPrepare Python virtualenv\n\n\napt-get install python virtualenv\nvirtualenv .venv\n\n\n\n\nInstall mkdocs\n\n\nprepare file requirements.txt\n\n\npip\nmkdocs\nmkdocs-bootswatch\n\n\n\n\ninstall software using pip\n\n\nsource .venv/bin/activate\npip install -U -r requirements.txt\n\n\n\n\nCreate blog page\n\n\nmkdocs new blog\ncd blog\n\n\n\n\nRun\n\n\nvi mkdocs.yml\nvi docs/index.md\nmkdocs serve\n\n\n\n\nPoint your browser to \nhttp://localhost:8000\n to test it\n\n\nConclusion\n\n\nWith mkdocs is it quite easy to setup simple websites like blogs and run this on any system.\n\n\nLinks\n\n\n\n\nhttps://mkdocs.org\n\n\n\n\n\n\nCreated: 2018-05-27 \nUpdated: 2018-06-03",
            "title": "2018-05-27 - How-to build a simple blog site"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#how-to-build-a-simple-blog-site",
            "text": "",
            "title": "How-to build a simple blog site"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#goals",
            "text": "Setting up a simple blog for myself. Simple means for me small software, not many dependencies, no database.",
            "title": "Goals"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#requirements",
            "text": "The blogging software ...   is easy to build, package and run everywhere. On my local laptop or any server.  can be hostsed locally  uses Markdown  is able to use themes",
            "title": "Requirements"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#investigation",
            "text": "First we are trying to find a suitable blog/wiki software to run our blog. I have tried these solutions:   MDwiki - looks like a good software but installation failed on my pc at least.  MkDocs - simple and works like a charm.   dokuwiki - good and well maintained software with a big list of plugins but it seems that it does not support plain markdown   At the end of my investigation choose for MkDocs because it is very simple, meeting my needs and can be configured very simple way.",
            "title": "Investigation"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#workflow",
            "text": "",
            "title": "Workflow"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#prerequesites",
            "text": "Running Linux like Ubuntu, Debian, Arch Linux, ...",
            "title": "Prerequesites"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#prepare-python-virtualenv",
            "text": "apt-get install python virtualenv\nvirtualenv .venv",
            "title": "Prepare Python virtualenv"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#install-mkdocs",
            "text": "prepare file requirements.txt  pip\nmkdocs\nmkdocs-bootswatch  install software using pip  source .venv/bin/activate\npip install -U -r requirements.txt",
            "title": "Install mkdocs"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#create-blog-page",
            "text": "mkdocs new blog\ncd blog",
            "title": "Create blog page"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#run",
            "text": "vi mkdocs.yml\nvi docs/index.md\nmkdocs serve  Point your browser to  http://localhost:8000  to test it",
            "title": "Run"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#conclusion",
            "text": "With mkdocs is it quite easy to setup simple websites like blogs and run this on any system.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2018_05_27_How-to-build-a-simple-blog-site/#links",
            "text": "https://mkdocs.org    Created: 2018-05-27 \nUpdated: 2018-06-03",
            "title": "Links"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/",
            "text": "How-to deploy mkdocs site to github pages\n\n\nGoals\n\n\nI want to run my blog publicly using a service with it I am able to manage my data using markdown files and git but don't need to host the blog on my own. After some investigation I have seen that github pages are meeting my requirements well. Luckily supports mkdocs github pages deployments.\n\n\nInvestigation\n\n\nFirst I read some documentation like:\n\n\n\n\nMkDocs: Deploying\n\n\nMkDocs: Deploy your Markdown documents on GitHub Pages\n\n\nCreating a GitHub pages site with MkDocs\n\n\n\n\nWorkflow\n\n\nThen I have set this up using this workflow.\n\n\nPrerequesites\n\n\n\n\nRunning mkdocs installation. I have described \nhere on my blog\n how to setup a simple mkdocs site.\n\n\n\n\nPreparing mkdocs.yml\n\n\nAdd these lines to your mkdocs.yml\n\n\nsite_name: YOUR SITE NAME\nsite_url: https://YOURNAME.github.io/\nrepo_url: https://github.com/YOURNAME/YOURREPO/\n\n\n\n\nRunning mkdocs deployment\n\n\nmkdocs gh-deploy --clean\n\n\n\n\nPoint your browser to \nhttps://YOURNAME.github.io/YOURREPO\n\n\nCreating a redirect from github pages to your blog\n\n\nI at least dont like to have a contect root for \"/blog\" like \nhttps://bboortz.github.io/blog\n. \nSo that I have decided to create a redirect from \nhttps://bboortz.github.io/\n to \nhttps://bboortz.github.io/blog\n\n\nYou simply need to create a file index.html at the root of your gitpub pages directory and push it. My repository is: \nhttps://github.com/bboortz/bboortz.github.io\n\n\nThe content of the index.html looks like this:\n\n\n<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"refresh\" content=\"0; url=https://bboortz.github.io/blog\">\n        <script type=\"text/javascript\">\n            window.location.href = \"https://bboortz.github.io/blog\"\n        </script>\n        <title>Page Redirection</title>\n    </head>\n    <body>\n        <!-- Note: don't tell people to `click` the link, just tell them that it is a link. -->\n        If you are not redirected automatically, follow this <a href='https://bboortz.github.io/blog'>link to benni's blog</a>.\n    </body>\n</html>\n\n\n\n\n\nNow you are able to use \nhttps://YOURNAME.github.io/\n for your mkdocs site.\n\n\nConclusion\n\n\nAs we can see it is not very hard to push your mkdocs site as github pages. Unfortunately I was not able to push the pages directly to the contect root \"/\". So that have created a redirect using the index.html\n\n\nLinks\n\n\n\n\nstackoverflow: Redirect from an HTML page\n\n\n\n\n\n\nCreated: 2018-06-03\nUpdated: 2018-06-03",
            "title": "2018-06-03 - How-to deploy mkdocs site to github pages"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#how-to-deploy-mkdocs-site-to-github-pages",
            "text": "",
            "title": "How-to deploy mkdocs site to github pages"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#goals",
            "text": "I want to run my blog publicly using a service with it I am able to manage my data using markdown files and git but don't need to host the blog on my own. After some investigation I have seen that github pages are meeting my requirements well. Luckily supports mkdocs github pages deployments.",
            "title": "Goals"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#investigation",
            "text": "First I read some documentation like:   MkDocs: Deploying  MkDocs: Deploy your Markdown documents on GitHub Pages  Creating a GitHub pages site with MkDocs",
            "title": "Investigation"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#workflow",
            "text": "Then I have set this up using this workflow.",
            "title": "Workflow"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#prerequesites",
            "text": "Running mkdocs installation. I have described  here on my blog  how to setup a simple mkdocs site.",
            "title": "Prerequesites"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#preparing-mkdocsyml",
            "text": "Add these lines to your mkdocs.yml  site_name: YOUR SITE NAME\nsite_url: https://YOURNAME.github.io/\nrepo_url: https://github.com/YOURNAME/YOURREPO/",
            "title": "Preparing mkdocs.yml"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#running-mkdocs-deployment",
            "text": "mkdocs gh-deploy --clean  Point your browser to  https://YOURNAME.github.io/YOURREPO",
            "title": "Running mkdocs deployment"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#creating-a-redirect-from-github-pages-to-your-blog",
            "text": "I at least dont like to have a contect root for \"/blog\" like  https://bboortz.github.io/blog . \nSo that I have decided to create a redirect from  https://bboortz.github.io/  to  https://bboortz.github.io/blog  You simply need to create a file index.html at the root of your gitpub pages directory and push it. My repository is:  https://github.com/bboortz/bboortz.github.io  The content of the index.html looks like this:  <!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"refresh\" content=\"0; url=https://bboortz.github.io/blog\">\n        <script type=\"text/javascript\">\n            window.location.href = \"https://bboortz.github.io/blog\"\n        </script>\n        <title>Page Redirection</title>\n    </head>\n    <body>\n        <!-- Note: don't tell people to `click` the link, just tell them that it is a link. -->\n        If you are not redirected automatically, follow this <a href='https://bboortz.github.io/blog'>link to benni's blog</a>.\n    </body>\n</html>  Now you are able to use  https://YOURNAME.github.io/  for your mkdocs site.",
            "title": "Creating a redirect from github pages to your blog"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#conclusion",
            "text": "As we can see it is not very hard to push your mkdocs site as github pages. Unfortunately I was not able to push the pages directly to the contect root \"/\". So that have created a redirect using the index.html",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#links",
            "text": "stackoverflow: Redirect from an HTML page    Created: 2018-06-03\nUpdated: 2018-06-03",
            "title": "Links"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/",
            "text": "My first tries with Rust programming language\n\n\nThe last months I have seen a lot of blog that are writing about the Rust programming language. Sometimes how good it is, sometimes why it is better then other programming languages. \nThen I have seen a blog series \nWriting an OS in Rust\n and \nWriting an OS in Rust - Second Edition\n.\nI thought myself why not give Rust a try. \n\n\nGoals\n\n\nInspired by this I am trying Rust a few hours, understanding principles and design goals, and build something really simple.\nTherefore I will read some documenation, setup my local dev environment, will develop a hello world program and after that a bit more complex program.\n\n\nProcess\n\n\nInvestigations\n\n\nI have started my work with reading some documentation, esspecially:\n\n\n\n\nThe Rust Programming Language\n\n\nThe Rust Design FAQ\n\n\nDiving into Rust for the first time - Mozilla Hacks\n\n\nInterview with Steve Klabnik: How Rust Compares to Other Languages and More\n\n\n\n\nSetting up a local dev environment\n\n\nFirst I had to install the software package rustup. It is described how to achieve that on the rust website. \nUnfortunately was the Arch Linux rustup package which I have installed via pacman not working for me. \nIt seems for the the problem was that I missed to configure a default toolchain. I havn't followed this approach.\nSo that I decided to go with the default install doc \nInstall Rust\n\n\ncurl https://sh.rustup.rs -sSf | sh\nsource $HOME/.cargo/env\n\n\n\n\nIn case you want to update your installation, simple type in:\n\n\nrustup update && cargo update\n\n\n\n\nAfter that I have checked the version of the installed rust compiler using\n\n\n$ rustc --version && cargo --version\nrustc 1.26.2 (594fb253c 2018-06-01)\ncargo 1.26.0 (0e7c5a931 2018-04-06)\n\n\n\n\nMy current local rust/cargo installation is 13 MB big which is quite small:\n\n\n$ du -sh ~/.cargo\n13M /home/benni/.cargo\n\n\n\n\nI have decided to use vi as a editor. So that it is not needed to install any IDE.\n\n\nHello World Program\n\n\nOur first program is a hello world programm which only prints out \"Hello World\"\n\n\nCreate the file \"hello.rs\" with this content:\n\n\n/// The main function\nfn main() {\n    // Print text\n    println!(\"Hello World!\");\n}\n\n\n\n\nCompile the program\n\n\nrustc hello.rs\n\n\n\n\nAnd run it\n\n\n./hello\n\n\n\n\nYou will see the expected output.\n\n\nA serious example\n\n\nAfter we have installed rust and have compiled our first program we are now using rust for a more serious example.\nWhat means serius? Nowadays has everything an API. Therefore we are developing a simple REST API plus showing how to test rust source code.\n\n\nDeveloping a REST application efforts a lot more knowledge about Rust. Therefore I read a bunch of ressources\n\n\n\n\nrustless/rustless\n\n\nBuild a CRUD API with Rust\n\n\nAre we web yet?\n\n\n\n\nCreating the REST API\n\n\nCreating the project\n\n\n$ cargo new hello-api --bin && cd hello-api\n     Created binary (application) `hello-api` project\n\n\n\n\nAdding the dependencies to file Cargo.toml\n\n\n[dependencies]\nrocket = \"0.3.12\"\nrocket_codegen = \"0.3.12\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_derive = \"1.0\"\n\n[dependencies.rocket_contrib]\ndefault-features = false\nfeatures = [\"json\"]\n#path = \"../Rocket/contrib/lib\"\n\n\n\n\nAdding the needed source code to src/main.rs\n\n\n#![feature(plugin, decl_macro)]\n#![plugin(rocket_codegen)]\n\nextern crate rocket;\n#[macro_use] extern crate rocket_contrib;\n#[macro_use] extern crate serde_derive;\n\n#[cfg(test)] mod tests;\n\nuse rocket_contrib::{Json, Value};\n\n\n#[derive(Serialize, Deserialize)]\nstruct HelloInput{\n    name: String\n}\n\n\n#[get(\"/\", format = \"application/json\")]\nfn index() -> Json<Value> {\n    Json(json!({\n        \"status\": \"OK\",\n    }))\n}\n\n#[post(\"/\", format = \"application/json\", data = \"<json_input>\")]\nfn hello(json_input: Json<HelloInput>) -> Json<Value> {\n    Json(json!({\n        \"hello\": json_input.name,\n    }))\n}\n\n#[error(404)]\nfn not_found() -> Json<Value> {\n    Json(json!({\n        \"status\": \"error\",\n        \"reason\": \"Resource was not found.\"\n    }))\n}\n\nfn rocket() -> rocket::Rocket {\n    rocket::ignite()\n        .mount(\"/\", routes![index])\n        .mount(\"/hello\", routes![hello])\n        .catch(errors![not_found])\n}\n\nfn main() {\n    rocket().launch();\n}\n\n\n\n\nCompiling the software\n\n\ncargo build\n\n\n\n\nThis build has failed with the error message \"\nInstalled version is: 1.26.2 (2018-06-01). Minimum required: 1.27.0-nightly (2018-04-26).\n\".\nTherefore we are updating the installation to nigthly using this commands:\n\n\nrustup default nightly\nrustup update && cargo update\n\n\n\n\nNow we are using the following versions:\n\n\n$ rustc --version && cargo --version\nrustc 1.28.0-nightly (2a0062974 2018-06-09)\ncargo 1.28.0-nightly (e2348c2db 2018-06-07)\n\n\n\n\nNow we are building again\n\n\n$ cargo build\n[...]\nFinished dev [unoptimized + debuginfo] target(s) in 53.42s\n\n\n\n\nLooks good. So let us run the REST API.\n\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.06s\n     Running `target/debug/hello-api`\n\ud83d\udd27  Configured for development.\n    => address: localhost\n    => port: 8000\n    => log: normal\n    => workers: 8\n    => secret key: generated\n    => limits: forms = 32KiB\n    => tls: disabled\n\ud83d\udef0  Mounting '/hello':\n    => GET /hello/<name>/<age>\n\ud83d\ude80  Rocket has launched from http://localhost:8000\n\n\n\n\nLet's test the REST API with a GET /\n\n\n$ curl http://localhost:8000/\n{\"status\":\"OK\"}\n\n\n\n\nAnt now with a POST /hello with some input data:\n\n\n$ curl  \\\n  --request POST \\\n  --header \"Content-Type: application/json\" \\\n  --data '{\"name\":\"benni\"}' \\\n  http://localhost:8000/hello\n{\"hello\":\"benni\"}\n\n\n\n\nTesting our Software\n\n\nTest cases are important to validate our API. So that we are writing up a few unit test. Just add these lines in \"src/tests.rs\n\n\nuse rocket;\nuse rocket::local::Client;\nuse rocket::http::{Status, ContentType};\n\n#[test]\nfn test_not_found() {\n        let client = Client::new(rocket()).unwrap();\n\n    let res = client.get(\"/not_found\")\n            .header(ContentType::JSON)\n                .dispatch();\n    assert_eq!(res.status(), Status::NotFound);\n}\n\n#[test]\nfn test_alive() {\n        let client = Client::new(rocket()).unwrap();\n\n    let mut res = client.get(\"/\")\n            .header(ContentType::JSON)\n                .dispatch();\n    let body = res.body_string().unwrap();\n    assert_eq!(res.status(), Status::Ok);\n    assert!(body.contains(\"OK\"));\n}\n\n#[test]\nfn test_post_hello() {\n        let client = Client::new(rocket()).unwrap();\n\n    let mut res = client.post(\"/hello\")\n        .header(ContentType::JSON)\n        .body(r#\"{ \"name\": \"benni\" }\"#)\n        .dispatch();\n\n    assert_eq!(res.status(), Status::Ok);\n        let body = res.body().unwrap().into_string().unwrap();\n        assert!(body.contains(\"hello\"));\n}\n\n\n\n\nAnd run:\n\n\n$ cargo test\n[...]\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n\n\n\nConclusion\n\n\nMy first try with Rust took me about 6 hours. After 6 hours I am able write very simple programs including test cases and I am able to work with Rust CLI and dependencies.\n1 1/2 year ago I have learned go. With go I had a really great learning curve. \nRight now I made with Rust my very first steps but it seems for me Rust is not very hard to learn if you are familiar with C/C++ like languages.\nWhat I really apprechiate after my first \"work\" with Rust is:\n\n\n\n\nThe existing toolchain with good cli commands\n\n\nthe existing dependency management\n\n\nThe integrated unit testing\n\n\n\n\nOn the other side of the coin I have to say that the Rust syntax feels a bit strange for me. Especially Rust macros and the extern statement are parts which I am copy-and-paste right now. \nI guess I need to use it more often then it becomes easier.\n\n\nFrom this starting point I am planning to invest a bit more time into Rust to see if it fits for my personal purposes.\n\n\nLinks\n\n\n\n\nRocket\n\n\nRocket API\n\n\nSergioBenitez/Rocket\n\n\n\n\n\n\nCreated: 2018-06-10\nUpdated: 2018-06-10",
            "title": "2018-06-10 - My first tries with Rust programming language"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#my-first-tries-with-rust-programming-language",
            "text": "The last months I have seen a lot of blog that are writing about the Rust programming language. Sometimes how good it is, sometimes why it is better then other programming languages. \nThen I have seen a blog series  Writing an OS in Rust  and  Writing an OS in Rust - Second Edition .\nI thought myself why not give Rust a try.",
            "title": "My first tries with Rust programming language"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#goals",
            "text": "Inspired by this I am trying Rust a few hours, understanding principles and design goals, and build something really simple.\nTherefore I will read some documenation, setup my local dev environment, will develop a hello world program and after that a bit more complex program.",
            "title": "Goals"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#process",
            "text": "",
            "title": "Process"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#investigations",
            "text": "I have started my work with reading some documentation, esspecially:   The Rust Programming Language  The Rust Design FAQ  Diving into Rust for the first time - Mozilla Hacks  Interview with Steve Klabnik: How Rust Compares to Other Languages and More",
            "title": "Investigations"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#setting-up-a-local-dev-environment",
            "text": "First I had to install the software package rustup. It is described how to achieve that on the rust website. \nUnfortunately was the Arch Linux rustup package which I have installed via pacman not working for me. \nIt seems for the the problem was that I missed to configure a default toolchain. I havn't followed this approach.\nSo that I decided to go with the default install doc  Install Rust  curl https://sh.rustup.rs -sSf | sh\nsource $HOME/.cargo/env  In case you want to update your installation, simple type in:  rustup update && cargo update  After that I have checked the version of the installed rust compiler using  $ rustc --version && cargo --version\nrustc 1.26.2 (594fb253c 2018-06-01)\ncargo 1.26.0 (0e7c5a931 2018-04-06)  My current local rust/cargo installation is 13 MB big which is quite small:  $ du -sh ~/.cargo\n13M /home/benni/.cargo  I have decided to use vi as a editor. So that it is not needed to install any IDE.",
            "title": "Setting up a local dev environment"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#hello-world-program",
            "text": "Our first program is a hello world programm which only prints out \"Hello World\"  Create the file \"hello.rs\" with this content:  /// The main function\nfn main() {\n    // Print text\n    println!(\"Hello World!\");\n}  Compile the program  rustc hello.rs  And run it  ./hello  You will see the expected output.",
            "title": "Hello World Program"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#a-serious-example",
            "text": "After we have installed rust and have compiled our first program we are now using rust for a more serious example.\nWhat means serius? Nowadays has everything an API. Therefore we are developing a simple REST API plus showing how to test rust source code.  Developing a REST application efforts a lot more knowledge about Rust. Therefore I read a bunch of ressources   rustless/rustless  Build a CRUD API with Rust  Are we web yet?",
            "title": "A serious example"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#creating-the-rest-api",
            "text": "Creating the project  $ cargo new hello-api --bin && cd hello-api\n     Created binary (application) `hello-api` project  Adding the dependencies to file Cargo.toml  [dependencies]\nrocket = \"0.3.12\"\nrocket_codegen = \"0.3.12\"\nserde = \"1.0\"\nserde_json = \"1.0\"\nserde_derive = \"1.0\"\n\n[dependencies.rocket_contrib]\ndefault-features = false\nfeatures = [\"json\"]\n#path = \"../Rocket/contrib/lib\"  Adding the needed source code to src/main.rs  #![feature(plugin, decl_macro)]\n#![plugin(rocket_codegen)]\n\nextern crate rocket;\n#[macro_use] extern crate rocket_contrib;\n#[macro_use] extern crate serde_derive;\n\n#[cfg(test)] mod tests;\n\nuse rocket_contrib::{Json, Value};\n\n\n#[derive(Serialize, Deserialize)]\nstruct HelloInput{\n    name: String\n}\n\n\n#[get(\"/\", format = \"application/json\")]\nfn index() -> Json<Value> {\n    Json(json!({\n        \"status\": \"OK\",\n    }))\n}\n\n#[post(\"/\", format = \"application/json\", data = \"<json_input>\")]\nfn hello(json_input: Json<HelloInput>) -> Json<Value> {\n    Json(json!({\n        \"hello\": json_input.name,\n    }))\n}\n\n#[error(404)]\nfn not_found() -> Json<Value> {\n    Json(json!({\n        \"status\": \"error\",\n        \"reason\": \"Resource was not found.\"\n    }))\n}\n\nfn rocket() -> rocket::Rocket {\n    rocket::ignite()\n        .mount(\"/\", routes![index])\n        .mount(\"/hello\", routes![hello])\n        .catch(errors![not_found])\n}\n\nfn main() {\n    rocket().launch();\n}  Compiling the software  cargo build  This build has failed with the error message \" Installed version is: 1.26.2 (2018-06-01). Minimum required: 1.27.0-nightly (2018-04-26). \".\nTherefore we are updating the installation to nigthly using this commands:  rustup default nightly\nrustup update && cargo update  Now we are using the following versions:  $ rustc --version && cargo --version\nrustc 1.28.0-nightly (2a0062974 2018-06-09)\ncargo 1.28.0-nightly (e2348c2db 2018-06-07)  Now we are building again  $ cargo build\n[...]\nFinished dev [unoptimized + debuginfo] target(s) in 53.42s  Looks good. So let us run the REST API.  $ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.06s\n     Running `target/debug/hello-api`\n\ud83d\udd27  Configured for development.\n    => address: localhost\n    => port: 8000\n    => log: normal\n    => workers: 8\n    => secret key: generated\n    => limits: forms = 32KiB\n    => tls: disabled\n\ud83d\udef0  Mounting '/hello':\n    => GET /hello/<name>/<age>\n\ud83d\ude80  Rocket has launched from http://localhost:8000  Let's test the REST API with a GET /  $ curl http://localhost:8000/\n{\"status\":\"OK\"}  Ant now with a POST /hello with some input data:  $ curl  \\\n  --request POST \\\n  --header \"Content-Type: application/json\" \\\n  --data '{\"name\":\"benni\"}' \\\n  http://localhost:8000/hello\n{\"hello\":\"benni\"}",
            "title": "Creating the REST API"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#testing-our-software",
            "text": "Test cases are important to validate our API. So that we are writing up a few unit test. Just add these lines in \"src/tests.rs  use rocket;\nuse rocket::local::Client;\nuse rocket::http::{Status, ContentType};\n\n#[test]\nfn test_not_found() {\n        let client = Client::new(rocket()).unwrap();\n\n    let res = client.get(\"/not_found\")\n            .header(ContentType::JSON)\n                .dispatch();\n    assert_eq!(res.status(), Status::NotFound);\n}\n\n#[test]\nfn test_alive() {\n        let client = Client::new(rocket()).unwrap();\n\n    let mut res = client.get(\"/\")\n            .header(ContentType::JSON)\n                .dispatch();\n    let body = res.body_string().unwrap();\n    assert_eq!(res.status(), Status::Ok);\n    assert!(body.contains(\"OK\"));\n}\n\n#[test]\nfn test_post_hello() {\n        let client = Client::new(rocket()).unwrap();\n\n    let mut res = client.post(\"/hello\")\n        .header(ContentType::JSON)\n        .body(r#\"{ \"name\": \"benni\" }\"#)\n        .dispatch();\n\n    assert_eq!(res.status(), Status::Ok);\n        let body = res.body().unwrap().into_string().unwrap();\n        assert!(body.contains(\"hello\"));\n}  And run:  $ cargo test\n[...]\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out",
            "title": "Testing our Software"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#conclusion",
            "text": "My first try with Rust took me about 6 hours. After 6 hours I am able write very simple programs including test cases and I am able to work with Rust CLI and dependencies.\n1 1/2 year ago I have learned go. With go I had a really great learning curve. \nRight now I made with Rust my very first steps but it seems for me Rust is not very hard to learn if you are familiar with C/C++ like languages.\nWhat I really apprechiate after my first \"work\" with Rust is:   The existing toolchain with good cli commands  the existing dependency management  The integrated unit testing   On the other side of the coin I have to say that the Rust syntax feels a bit strange for me. Especially Rust macros and the extern statement are parts which I am copy-and-paste right now. \nI guess I need to use it more often then it becomes easier.  From this starting point I am planning to invest a bit more time into Rust to see if it fits for my personal purposes.",
            "title": "Conclusion"
        },
        {
            "location": "/blog/2018_06_10_My_first_tries_with_Rust_programming_language/#links",
            "text": "Rocket  Rocket API  SergioBenitez/Rocket    Created: 2018-06-10\nUpdated: 2018-06-10",
            "title": "Links"
        },
        {
            "location": "/links/",
            "text": "Some Links\n\n\n\n\nVerantwortlich im Sinne des Presserechts - Wikipedia \n\n\nTelemediengesetz - Wikipedia \n\n\nMkDocs",
            "title": "Links"
        },
        {
            "location": "/links/#some-links",
            "text": "Verantwortlich im Sinne des Presserechts - Wikipedia   Telemediengesetz - Wikipedia   MkDocs",
            "title": "Some Links"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nThis is my own private blog\n\n\nImpressium and ViSdp\n\n\nBenjamin Boortz\nLuchtenmakerweg 25\n38126 Braunschweig\nE-Mail: bennis.blog@secure.mailbox.org",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "This is my own private blog",
            "title": "About"
        },
        {
            "location": "/about/#impressium-and-visdp",
            "text": "Benjamin Boortz\nLuchtenmakerweg 25\n38126 Braunschweig\nE-Mail: bennis.blog@secure.mailbox.org",
            "title": "Impressium and ViSdp"
        }
    ]
}