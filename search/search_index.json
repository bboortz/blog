{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Benni's Blog My private blog which is available at https://bboortz.github.io . Here you can find some resources about stuff I am interested in. How-to contribute? You want to contribute to my blog in any way? Fixing typos, bugs, etc. Simply fork my git repository https://github.com/bboortz/blog , make your changes and create a pull request. Some usefull commands for this blog How-to run this blog in preview mode? make site_preview Point your browser to http://localhost:8000 . How-to deploy this blog as github page? make site_deploy Point your browser to https://bboortz.github.io . More Resources https://github.com/bboortz https://chaos.social/@bboortz","title":"Home"},{"location":"#welcome-to-bennis-blog","text":"My private blog which is available at https://bboortz.github.io . Here you can find some resources about stuff I am interested in.","title":"Welcome to Benni's Blog"},{"location":"#how-to-contribute","text":"You want to contribute to my blog in any way? Fixing typos, bugs, etc. Simply fork my git repository https://github.com/bboortz/blog , make your changes and create a pull request.","title":"How-to contribute?"},{"location":"#some-usefull-commands-for-this-blog","text":"","title":"Some usefull commands for this blog"},{"location":"#how-to-run-this-blog-in-preview-mode","text":"make site_preview Point your browser to http://localhost:8000 .","title":"How-to run this blog in preview mode?"},{"location":"#how-to-deploy-this-blog-as-github-page","text":"make site_deploy Point your browser to https://bboortz.github.io .","title":"How-to deploy this blog as github page?"},{"location":"#more-resources","text":"https://github.com/bboortz https://chaos.social/@bboortz","title":"More Resources"},{"location":"about/","text":"About This is my own private blog Impressium and ViSdp Benjamin Boortz Luchtenmakerweg 25 38126 Braunschweig E-Mail: bennis.blog@secure.mailbox.org","title":"About"},{"location":"about/#about","text":"This is my own private blog","title":"About"},{"location":"about/#impressium-and-visdp","text":"Benjamin Boortz Luchtenmakerweg 25 38126 Braunschweig E-Mail: bennis.blog@secure.mailbox.org","title":"Impressium and ViSdp"},{"location":"links/","text":"Some Links Verantwortlich im Sinne des Presserechts - Wikipedia Telemediengesetz - Wikipedia MkDocs","title":"Links"},{"location":"links/#some-links","text":"Verantwortlich im Sinne des Presserechts - Wikipedia Telemediengesetz - Wikipedia MkDocs","title":"Some Links"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/","text":"How-to build a simple blog site Goals Setting up a simple blog for myself. Simple means for me small software, not many dependencies, no database. Requirements The blogging software ... is easy to build, package and run everywhere. On my local laptop or any server. can be hostsed locally uses Markdown is able to use themes Investigation First we are trying to find a suitable blog/wiki software to run our blog. I have tried these solutions: MDwiki - looks like a good software but installation failed on my pc at least. MkDocs - simple and works like a charm. dokuwiki - good and well maintained software with a big list of plugins but it seems that it does not support plain markdown At the end of my investigation choose for MkDocs because it is very simple, meeting my needs and can be configured very simple way. Workflow Prerequesites Running Linux like Ubuntu, Debian, Arch Linux, ... Prepare Python virtualenv apt-get install python virtualenv virtualenv .venv Install mkdocs prepare file requirements.txt pip mkdocs mkdocs-bootswatch install software using pip source .venv/bin/activate pip install -U -r requirements.txt Create blog page mkdocs new blog cd blog Run vi mkdocs.yml vi docs/index.md mkdocs serve Point your browser to http://localhost:8000 to test it Conclusion With mkdocs is it quite easy to setup simple websites like blogs and run this on any system. Links https://mkdocs.org Created: 2018-05-27 Updated: 2018-06-03","title":"2018-05-27 - How-to build a simple blog site"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#how-to-build-a-simple-blog-site","text":"","title":"How-to build a simple blog site"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#goals","text":"Setting up a simple blog for myself. Simple means for me small software, not many dependencies, no database.","title":"Goals"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#requirements","text":"The blogging software ... is easy to build, package and run everywhere. On my local laptop or any server. can be hostsed locally uses Markdown is able to use themes","title":"Requirements"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#investigation","text":"First we are trying to find a suitable blog/wiki software to run our blog. I have tried these solutions: MDwiki - looks like a good software but installation failed on my pc at least. MkDocs - simple and works like a charm. dokuwiki - good and well maintained software with a big list of plugins but it seems that it does not support plain markdown At the end of my investigation choose for MkDocs because it is very simple, meeting my needs and can be configured very simple way.","title":"Investigation"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#workflow","text":"","title":"Workflow"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#prerequesites","text":"Running Linux like Ubuntu, Debian, Arch Linux, ...","title":"Prerequesites"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#prepare-python-virtualenv","text":"apt-get install python virtualenv virtualenv .venv","title":"Prepare Python virtualenv"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#install-mkdocs","text":"prepare file requirements.txt pip mkdocs mkdocs-bootswatch install software using pip source .venv/bin/activate pip install -U -r requirements.txt","title":"Install mkdocs"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#create-blog-page","text":"mkdocs new blog cd blog","title":"Create blog page"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#run","text":"vi mkdocs.yml vi docs/index.md mkdocs serve Point your browser to http://localhost:8000 to test it","title":"Run"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#conclusion","text":"With mkdocs is it quite easy to setup simple websites like blogs and run this on any system.","title":"Conclusion"},{"location":"blog/2018_05_27_How-to-build-a-simple-blog-site/#links","text":"https://mkdocs.org Created: 2018-05-27 Updated: 2018-06-03","title":"Links"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/","text":"How-to deploy mkdocs site to github pages Goals I want to run my blog publicly using a service with it I am able to manage my data using markdown files and git but don't need to host the blog on my own. After some investigation I have seen that github pages are meeting my requirements well. Luckily supports mkdocs github pages deployments. Investigation First I read some documentation like: MkDocs: Deploying MkDocs: Deploy your Markdown documents on GitHub Pages Creating a GitHub pages site with MkDocs Workflow Then I have set this up using this workflow. Prerequesites Running mkdocs installation. I have described here on my blog how to setup a simple mkdocs site. Preparing mkdocs.yml Add these lines to your mkdocs.yml site_name: YOUR SITE NAME site_url: https://YOURNAME.github.io/ repo_url: https://github.com/YOURNAME/YOURREPO/ Running mkdocs deployment mkdocs gh-deploy --clean Point your browser to https://YOURNAME.github.io/YOURREPO Creating a redirect from github pages to your blog I at least dont like to have a contect root for \"/blog\" like https://bboortz.github.io/blog . So that I have decided to create a redirect from https://bboortz.github.io/ to https://bboortz.github.io/blog You simply need to create a file index.html at the root of your gitpub pages directory and push it. My repository is: https://github.com/bboortz/bboortz.github.io The content of the index.html looks like this: <!DOCTYPE HTML> <html lang=\"en-US\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"refresh\" content=\"0; url=https://bboortz.github.io/blog\"> <script type=\"text/javascript\"> window.location.href = \"https://bboortz.github.io/blog\" </script> <title>Page Redirection</title> </head> <body> <!-- Note: don't tell people to `click` the link, just tell them that it is a link. --> If you are not redirected automatically, follow this <a href='https://bboortz.github.io/blog'>link to benni's blog</a>. </body> </html> Now you are able to use https://YOURNAME.github.io/ for your mkdocs site. Conclusion As we can see it is not very hard to push your mkdocs site as github pages. Unfortunately I was not able to push the pages directly to the contect root \"/\". So that have created a redirect using the index.html Links stackoverflow: Redirect from an HTML page Created: 2018-06-03 Updated: 2018-06-03","title":"2018-06-03 - How-to deploy mkdocs site to github pages"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#how-to-deploy-mkdocs-site-to-github-pages","text":"","title":"How-to deploy mkdocs site to github pages"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#goals","text":"I want to run my blog publicly using a service with it I am able to manage my data using markdown files and git but don't need to host the blog on my own. After some investigation I have seen that github pages are meeting my requirements well. Luckily supports mkdocs github pages deployments.","title":"Goals"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#investigation","text":"First I read some documentation like: MkDocs: Deploying MkDocs: Deploy your Markdown documents on GitHub Pages Creating a GitHub pages site with MkDocs","title":"Investigation"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#workflow","text":"Then I have set this up using this workflow.","title":"Workflow"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#prerequesites","text":"Running mkdocs installation. I have described here on my blog how to setup a simple mkdocs site.","title":"Prerequesites"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#preparing-mkdocsyml","text":"Add these lines to your mkdocs.yml site_name: YOUR SITE NAME site_url: https://YOURNAME.github.io/ repo_url: https://github.com/YOURNAME/YOURREPO/","title":"Preparing mkdocs.yml"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#running-mkdocs-deployment","text":"mkdocs gh-deploy --clean Point your browser to https://YOURNAME.github.io/YOURREPO","title":"Running mkdocs deployment"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#creating-a-redirect-from-github-pages-to-your-blog","text":"I at least dont like to have a contect root for \"/blog\" like https://bboortz.github.io/blog . So that I have decided to create a redirect from https://bboortz.github.io/ to https://bboortz.github.io/blog You simply need to create a file index.html at the root of your gitpub pages directory and push it. My repository is: https://github.com/bboortz/bboortz.github.io The content of the index.html looks like this: <!DOCTYPE HTML> <html lang=\"en-US\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"refresh\" content=\"0; url=https://bboortz.github.io/blog\"> <script type=\"text/javascript\"> window.location.href = \"https://bboortz.github.io/blog\" </script> <title>Page Redirection</title> </head> <body> <!-- Note: don't tell people to `click` the link, just tell them that it is a link. --> If you are not redirected automatically, follow this <a href='https://bboortz.github.io/blog'>link to benni's blog</a>. </body> </html> Now you are able to use https://YOURNAME.github.io/ for your mkdocs site.","title":"Creating a redirect from github pages to your blog"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#conclusion","text":"As we can see it is not very hard to push your mkdocs site as github pages. Unfortunately I was not able to push the pages directly to the contect root \"/\". So that have created a redirect using the index.html","title":"Conclusion"},{"location":"blog/2018_06_03_How-to-deploy-mkdocs-site-to-github-pages/#links","text":"stackoverflow: Redirect from an HTML page Created: 2018-06-03 Updated: 2018-06-03","title":"Links"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/","text":"My first tries with Rust programming language The last months I have seen a lot of blog that are writing about the Rust programming language. Sometimes how good it is, sometimes why it is better then other programming languages. Then I have seen a blog series Writing an OS in Rust and Writing an OS in Rust - Second Edition . I thought myself why not give Rust a try. Goals Inspired by this I am trying Rust a few hours, understanding principles and design goals, and build something really simple. Therefore I will read some documenation, setup my local dev environment, will develop a hello world program and after that a bit more complex program. Process Investigations I have started my work with reading some documentation, esspecially: The Rust Programming Language The Rust Design FAQ Diving into Rust for the first time - Mozilla Hacks Interview with Steve Klabnik: How Rust Compares to Other Languages and More Setting up a local dev environment First I had to install the software package rustup. It is described how to achieve that on the rust website. Unfortunately was the Arch Linux rustup package which I have installed via pacman not working for me. It seems for the the problem was that I missed to configure a default toolchain. I havn't followed this approach. So that I decided to go with the default install doc Install Rust curl https://sh.rustup.rs -sSf | sh source $HOME/.cargo/env In case you want to update your installation, simple type in: rustup update && cargo update After that I have checked the version of the installed rust compiler using $ rustc --version && cargo --version rustc 1.26.2 (594fb253c 2018-06-01) cargo 1.26.0 (0e7c5a931 2018-04-06) My current local rust/cargo installation is 13 MB big which is quite small: $ du -sh ~/.cargo 13M /home/benni/.cargo I have decided to use vi as a editor. So that it is not needed to install any IDE. Hello World Program Our first program is a hello world programm which only prints out \"Hello World\" Create the file \"hello.rs\" with this content: /// The main function fn main() { // Print text println!(\"Hello World!\"); } Compile the program rustc hello.rs And run it ./hello You will see the expected output. A serious example After we have installed rust and have compiled our first program we are now using rust for a more serious example. What means serius? Nowadays has everything an API. Therefore we are developing a simple REST API plus showing how to test rust source code. Developing a REST application efforts a lot more knowledge about Rust. Therefore I read a bunch of ressources rustless/rustless Build a CRUD API with Rust Are we web yet? Creating the REST API Creating the project $ cargo new hello-api --bin && cd hello-api Created binary (application) `hello-api` project Adding the dependencies to file Cargo.toml [dependencies] rocket = \"0.3.12\" rocket_codegen = \"0.3.12\" serde = \"1.0\" serde_json = \"1.0\" serde_derive = \"1.0\" [dependencies.rocket_contrib] default-features = false features = [\"json\"] #path = \"../Rocket/contrib/lib\" Adding the needed source code to src/main.rs #![feature(plugin, decl_macro)] #![plugin(rocket_codegen)] extern crate rocket; #[macro_use] extern crate rocket_contrib; #[macro_use] extern crate serde_derive; #[cfg(test)] mod tests; use rocket_contrib::{Json, Value}; #[derive(Serialize, Deserialize)] struct HelloInput{ name: String } #[get(\"/\", format = \"application/json\")] fn index() -> Json<Value> { Json(json!({ \"status\": \"OK\", })) } #[post(\"/\", format = \"application/json\", data = \"<json_input>\")] fn hello(json_input: Json<HelloInput>) -> Json<Value> { Json(json!({ \"hello\": json_input.name, })) } #[error(404)] fn not_found() -> Json<Value> { Json(json!({ \"status\": \"error\", \"reason\": \"Resource was not found.\" })) } fn rocket() -> rocket::Rocket { rocket::ignite() .mount(\"/\", routes![index]) .mount(\"/hello\", routes![hello]) .catch(errors![not_found]) } fn main() { rocket().launch(); } Compiling the software cargo build This build has failed with the error message \" Installed version is: 1.26.2 (2018-06-01). Minimum required: 1.27.0-nightly (2018-04-26). \". Therefore we are updating the installation to nigthly using this commands: rustup default nightly rustup update && cargo update Now we are using the following versions: $ rustc --version && cargo --version rustc 1.28.0-nightly (2a0062974 2018-06-09) cargo 1.28.0-nightly (e2348c2db 2018-06-07) Now we are building again $ cargo build [...] Finished dev [unoptimized + debuginfo] target(s) in 53.42s Looks good. So let us run the REST API. $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.06s Running `target/debug/hello-api` \ud83d\udd27 Configured for development. => address: localhost => port: 8000 => log: normal => workers: 8 => secret key: generated => limits: forms = 32KiB => tls: disabled \ud83d\udef0 Mounting '/hello': => GET /hello/<name>/<age> \ud83d\ude80 Rocket has launched from http://localhost:8000 Let's test the REST API with a GET / $ curl http://localhost:8000/ {\"status\":\"OK\"} Ant now with a POST /hello with some input data: $ curl \\ --request POST \\ --header \"Content-Type: application/json\" \\ --data '{\"name\":\"benni\"}' \\ http://localhost:8000/hello {\"hello\":\"benni\"} Testing our Software Test cases are important to validate our API. So that we are writing up a few unit test. Just add these lines in \"src/tests.rs use rocket; use rocket::local::Client; use rocket::http::{Status, ContentType}; #[test] fn test_not_found() { let client = Client::new(rocket()).unwrap(); let res = client.get(\"/not_found\") .header(ContentType::JSON) .dispatch(); assert_eq!(res.status(), Status::NotFound); } #[test] fn test_alive() { let client = Client::new(rocket()).unwrap(); let mut res = client.get(\"/\") .header(ContentType::JSON) .dispatch(); let body = res.body_string().unwrap(); assert_eq!(res.status(), Status::Ok); assert!(body.contains(\"OK\")); } #[test] fn test_post_hello() { let client = Client::new(rocket()).unwrap(); let mut res = client.post(\"/hello\") .header(ContentType::JSON) .body(r#\"{ \"name\": \"benni\" }\"#) .dispatch(); assert_eq!(res.status(), Status::Ok); let body = res.body().unwrap().into_string().unwrap(); assert!(body.contains(\"hello\")); } And run: $ cargo test [...] test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out Conclusion My first try with Rust took me about 6 hours. After 6 hours I am able write very simple programs including test cases and I am able to work with Rust CLI and dependencies. 1 1/2 year ago I have learned go. With go I had a really great learning curve. Right now I made with Rust my very first steps but it seems for me Rust is not very hard to learn if you are familiar with C/C++ like languages. What I really apprechiate after my first \"work\" with Rust is: The existing toolchain with good cli commands the existing dependency management The integrated unit testing On the other side of the coin I have to say that the Rust syntax feels a bit strange for me. Especially Rust macros and the extern statement are parts which I am copy-and-paste right now. I guess I need to use it more often then it becomes easier. From this starting point I am planning to invest a bit more time into Rust to see if it fits for my personal purposes. For the example source code of this blog post please refer to bboortz/blog-examples Links Rocket Rocket API SergioBenitez/Rocket Created: 2018-06-10 Updated: 2018-06-10","title":"2018-06-10 - My first tries with Rust programming language"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#my-first-tries-with-rust-programming-language","text":"The last months I have seen a lot of blog that are writing about the Rust programming language. Sometimes how good it is, sometimes why it is better then other programming languages. Then I have seen a blog series Writing an OS in Rust and Writing an OS in Rust - Second Edition . I thought myself why not give Rust a try.","title":"My first tries with Rust programming language"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#goals","text":"Inspired by this I am trying Rust a few hours, understanding principles and design goals, and build something really simple. Therefore I will read some documenation, setup my local dev environment, will develop a hello world program and after that a bit more complex program.","title":"Goals"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#process","text":"","title":"Process"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#investigations","text":"I have started my work with reading some documentation, esspecially: The Rust Programming Language The Rust Design FAQ Diving into Rust for the first time - Mozilla Hacks Interview with Steve Klabnik: How Rust Compares to Other Languages and More","title":"Investigations"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#setting-up-a-local-dev-environment","text":"First I had to install the software package rustup. It is described how to achieve that on the rust website. Unfortunately was the Arch Linux rustup package which I have installed via pacman not working for me. It seems for the the problem was that I missed to configure a default toolchain. I havn't followed this approach. So that I decided to go with the default install doc Install Rust curl https://sh.rustup.rs -sSf | sh source $HOME/.cargo/env In case you want to update your installation, simple type in: rustup update && cargo update After that I have checked the version of the installed rust compiler using $ rustc --version && cargo --version rustc 1.26.2 (594fb253c 2018-06-01) cargo 1.26.0 (0e7c5a931 2018-04-06) My current local rust/cargo installation is 13 MB big which is quite small: $ du -sh ~/.cargo 13M /home/benni/.cargo I have decided to use vi as a editor. So that it is not needed to install any IDE.","title":"Setting up a local dev environment"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#hello-world-program","text":"Our first program is a hello world programm which only prints out \"Hello World\" Create the file \"hello.rs\" with this content: /// The main function fn main() { // Print text println!(\"Hello World!\"); } Compile the program rustc hello.rs And run it ./hello You will see the expected output.","title":"Hello World Program"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#a-serious-example","text":"After we have installed rust and have compiled our first program we are now using rust for a more serious example. What means serius? Nowadays has everything an API. Therefore we are developing a simple REST API plus showing how to test rust source code. Developing a REST application efforts a lot more knowledge about Rust. Therefore I read a bunch of ressources rustless/rustless Build a CRUD API with Rust Are we web yet?","title":"A serious example"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#creating-the-rest-api","text":"Creating the project $ cargo new hello-api --bin && cd hello-api Created binary (application) `hello-api` project Adding the dependencies to file Cargo.toml [dependencies] rocket = \"0.3.12\" rocket_codegen = \"0.3.12\" serde = \"1.0\" serde_json = \"1.0\" serde_derive = \"1.0\" [dependencies.rocket_contrib] default-features = false features = [\"json\"] #path = \"../Rocket/contrib/lib\" Adding the needed source code to src/main.rs #![feature(plugin, decl_macro)] #![plugin(rocket_codegen)] extern crate rocket; #[macro_use] extern crate rocket_contrib; #[macro_use] extern crate serde_derive; #[cfg(test)] mod tests; use rocket_contrib::{Json, Value}; #[derive(Serialize, Deserialize)] struct HelloInput{ name: String } #[get(\"/\", format = \"application/json\")] fn index() -> Json<Value> { Json(json!({ \"status\": \"OK\", })) } #[post(\"/\", format = \"application/json\", data = \"<json_input>\")] fn hello(json_input: Json<HelloInput>) -> Json<Value> { Json(json!({ \"hello\": json_input.name, })) } #[error(404)] fn not_found() -> Json<Value> { Json(json!({ \"status\": \"error\", \"reason\": \"Resource was not found.\" })) } fn rocket() -> rocket::Rocket { rocket::ignite() .mount(\"/\", routes![index]) .mount(\"/hello\", routes![hello]) .catch(errors![not_found]) } fn main() { rocket().launch(); } Compiling the software cargo build This build has failed with the error message \" Installed version is: 1.26.2 (2018-06-01). Minimum required: 1.27.0-nightly (2018-04-26). \". Therefore we are updating the installation to nigthly using this commands: rustup default nightly rustup update && cargo update Now we are using the following versions: $ rustc --version && cargo --version rustc 1.28.0-nightly (2a0062974 2018-06-09) cargo 1.28.0-nightly (e2348c2db 2018-06-07) Now we are building again $ cargo build [...] Finished dev [unoptimized + debuginfo] target(s) in 53.42s Looks good. So let us run the REST API. $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.06s Running `target/debug/hello-api` \ud83d\udd27 Configured for development. => address: localhost => port: 8000 => log: normal => workers: 8 => secret key: generated => limits: forms = 32KiB => tls: disabled \ud83d\udef0 Mounting '/hello': => GET /hello/<name>/<age> \ud83d\ude80 Rocket has launched from http://localhost:8000 Let's test the REST API with a GET / $ curl http://localhost:8000/ {\"status\":\"OK\"} Ant now with a POST /hello with some input data: $ curl \\ --request POST \\ --header \"Content-Type: application/json\" \\ --data '{\"name\":\"benni\"}' \\ http://localhost:8000/hello {\"hello\":\"benni\"}","title":"Creating the REST API"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#testing-our-software","text":"Test cases are important to validate our API. So that we are writing up a few unit test. Just add these lines in \"src/tests.rs use rocket; use rocket::local::Client; use rocket::http::{Status, ContentType}; #[test] fn test_not_found() { let client = Client::new(rocket()).unwrap(); let res = client.get(\"/not_found\") .header(ContentType::JSON) .dispatch(); assert_eq!(res.status(), Status::NotFound); } #[test] fn test_alive() { let client = Client::new(rocket()).unwrap(); let mut res = client.get(\"/\") .header(ContentType::JSON) .dispatch(); let body = res.body_string().unwrap(); assert_eq!(res.status(), Status::Ok); assert!(body.contains(\"OK\")); } #[test] fn test_post_hello() { let client = Client::new(rocket()).unwrap(); let mut res = client.post(\"/hello\") .header(ContentType::JSON) .body(r#\"{ \"name\": \"benni\" }\"#) .dispatch(); assert_eq!(res.status(), Status::Ok); let body = res.body().unwrap().into_string().unwrap(); assert!(body.contains(\"hello\")); } And run: $ cargo test [...] test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out","title":"Testing our Software"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#conclusion","text":"My first try with Rust took me about 6 hours. After 6 hours I am able write very simple programs including test cases and I am able to work with Rust CLI and dependencies. 1 1/2 year ago I have learned go. With go I had a really great learning curve. Right now I made with Rust my very first steps but it seems for me Rust is not very hard to learn if you are familiar with C/C++ like languages. What I really apprechiate after my first \"work\" with Rust is: The existing toolchain with good cli commands the existing dependency management The integrated unit testing On the other side of the coin I have to say that the Rust syntax feels a bit strange for me. Especially Rust macros and the extern statement are parts which I am copy-and-paste right now. I guess I need to use it more often then it becomes easier. From this starting point I am planning to invest a bit more time into Rust to see if it fits for my personal purposes. For the example source code of this blog post please refer to bboortz/blog-examples","title":"Conclusion"},{"location":"blog/2018_06_10_My_first_tries_with_Rust_programming_language/#links","text":"Rocket Rocket API SergioBenitez/Rocket Created: 2018-06-10 Updated: 2018-06-10","title":"Links"},{"location":"blog/2018_12_27_35C3_Visit/","text":"My Visit at 35th Chaos Communication Congress (35C3) The Chaos Communication Congress (C3) is an annual congress for computer entuisasts. The congress is about computer security, ethics, policits and a lot more. I am attending to the C3 since a couple of years as a normal visitor. This time I want to document this visit a bit. For me it is not only a congress of workshops and lecutes. I am also enjoying to meet interesting persons. So that this time I am writing up my expierences at 35C3. Preperation Normally I dont really prepare for the C3. I just grab all my computer stuff to ensure I have to build something. This year I will not bring so much stuff to C3 because I want to attend to a few more talks and workshops but also having a bit more discussions. Very late but hopefully not too late I have submitted a lighning talk: https://c3lt.de/35c3/talk/review/7P8FUVWRHMRJNSDTNXHY7XYUNL9AZRFV . It is currently in the status \"submitted\" which does mean nothing and unfortunately is the lightning talk schedule full but lets hope.. Goals In front of I though about personal goals that I am trying to achive during this C3 Writing this blog entry :-) Find a Open Source project I want to contribute to Improving my Go skills and learn if another programming language fits more to my need personal needs Well, I have continoued the development in go around christmas with this two projects: highlander-api and snoop-api Starting the preperation for an talk next year. For sure I have to pass the Call for Participation . At least writing down for my self what is needed for a good talk at C3. The question is what makes a talk awesome? Talks This talks I am interested attend to but for sure I will not attend to half of them :-) Day Time Topic Fahrplan 1 11:30 Lecture: The Rocky Road to TLS 1.3 and better Internet Encryption Link 1 12:30 Lecture: Introduction to Deep Learning Link 1 16:10 Lecture: How does the Internet work? Link 1 16:10 Lecture: Scuttlebutt Link 1 23:30 Lecture: SD-WAN a New Hop Link 2 17:30 Lecture: How to teach programming to your loved ones Link 2 17:30 Lecture: Smart Home - Smart Hack Link 2 21:50 Lecture: Wallet Security Link 2 22:30 Lecture: The Ghost in the Machine Link 2 23:30 Lecture: A deep dive into the world of DOS viruses Link 3 11:30 Lecture: From Zero to Zero Day Link 3 17:30 Lecture: Sneaking In Network Security Link Lightning Talks This lightning talks I am planning to attend Day Time Topic Lightning 3 12:25 Take control of your digital identity with IRMA Link Day 1 Todays Plan ;-) Arriving at C3 at about 10am. Meeting a few friends Going to the first talks Having a few nices discussions The actual day Day 2 Todays Plan ;-) Going to some talks Walking around and meeting other persons of my interest ... Day 3 Day 4 Conclusion Q: What makes a talk awesome? Strategy for Call for Participation 2019 Giving a Lighning Talk Giving a talk at another Conference Trying to be successful at next Call for Participation Links 35C3 Wiki 35C3 FAQ 35C3 Schedule 35C3 Fahrplan 35C3 Lightning Talsk 35C3 Streaming 35C3 Event Blog 35C3 Media 35C3 Assemblies Projects at 35C3 35C3 at confwatch Created: 2018-06-10 Updated: 2018-06-10","title":"2018-12-27 - My visit at 35th Chaos Communication Congress"},{"location":"blog/2018_12_27_35C3_Visit/#my-visit-at-35th-chaos-communication-congress-35c3","text":"The Chaos Communication Congress (C3) is an annual congress for computer entuisasts. The congress is about computer security, ethics, policits and a lot more. I am attending to the C3 since a couple of years as a normal visitor. This time I want to document this visit a bit. For me it is not only a congress of workshops and lecutes. I am also enjoying to meet interesting persons. So that this time I am writing up my expierences at 35C3.","title":"My Visit at 35th Chaos Communication Congress (35C3)"},{"location":"blog/2018_12_27_35C3_Visit/#preperation","text":"Normally I dont really prepare for the C3. I just grab all my computer stuff to ensure I have to build something. This year I will not bring so much stuff to C3 because I want to attend to a few more talks and workshops but also having a bit more discussions. Very late but hopefully not too late I have submitted a lighning talk: https://c3lt.de/35c3/talk/review/7P8FUVWRHMRJNSDTNXHY7XYUNL9AZRFV . It is currently in the status \"submitted\" which does mean nothing and unfortunately is the lightning talk schedule full but lets hope..","title":"Preperation"},{"location":"blog/2018_12_27_35C3_Visit/#goals","text":"In front of I though about personal goals that I am trying to achive during this C3 Writing this blog entry :-) Find a Open Source project I want to contribute to Improving my Go skills and learn if another programming language fits more to my need personal needs Well, I have continoued the development in go around christmas with this two projects: highlander-api and snoop-api Starting the preperation for an talk next year. For sure I have to pass the Call for Participation . At least writing down for my self what is needed for a good talk at C3. The question is what makes a talk awesome?","title":"Goals"},{"location":"blog/2018_12_27_35C3_Visit/#talks","text":"This talks I am interested attend to but for sure I will not attend to half of them :-) Day Time Topic Fahrplan 1 11:30 Lecture: The Rocky Road to TLS 1.3 and better Internet Encryption Link 1 12:30 Lecture: Introduction to Deep Learning Link 1 16:10 Lecture: How does the Internet work? Link 1 16:10 Lecture: Scuttlebutt Link 1 23:30 Lecture: SD-WAN a New Hop Link 2 17:30 Lecture: How to teach programming to your loved ones Link 2 17:30 Lecture: Smart Home - Smart Hack Link 2 21:50 Lecture: Wallet Security Link 2 22:30 Lecture: The Ghost in the Machine Link 2 23:30 Lecture: A deep dive into the world of DOS viruses Link 3 11:30 Lecture: From Zero to Zero Day Link 3 17:30 Lecture: Sneaking In Network Security Link","title":"Talks"},{"location":"blog/2018_12_27_35C3_Visit/#lightning-talks","text":"This lightning talks I am planning to attend Day Time Topic Lightning 3 12:25 Take control of your digital identity with IRMA Link","title":"Lightning Talks"},{"location":"blog/2018_12_27_35C3_Visit/#day-1","text":"","title":"Day 1"},{"location":"blog/2018_12_27_35C3_Visit/#todays-plan-","text":"Arriving at C3 at about 10am. Meeting a few friends Going to the first talks Having a few nices discussions","title":"Todays Plan ;-)"},{"location":"blog/2018_12_27_35C3_Visit/#the-actual-day","text":"","title":"The actual day"},{"location":"blog/2018_12_27_35C3_Visit/#day-2","text":"","title":"Day 2"},{"location":"blog/2018_12_27_35C3_Visit/#todays-plan-_1","text":"Going to some talks Walking around and meeting other persons of my interest ...","title":"Todays Plan ;-)"},{"location":"blog/2018_12_27_35C3_Visit/#day-3","text":"","title":"Day 3"},{"location":"blog/2018_12_27_35C3_Visit/#day-4","text":"","title":"Day 4"},{"location":"blog/2018_12_27_35C3_Visit/#conclusion","text":"","title":"Conclusion"},{"location":"blog/2018_12_27_35C3_Visit/#q-what-makes-a-talk-awesome","text":"","title":"Q: What makes a talk awesome?"},{"location":"blog/2018_12_27_35C3_Visit/#strategy-for-call-for-participation-2019","text":"Giving a Lighning Talk Giving a talk at another Conference Trying to be successful at next Call for Participation","title":"Strategy for Call for Participation 2019"},{"location":"blog/2018_12_27_35C3_Visit/#links","text":"35C3 Wiki 35C3 FAQ 35C3 Schedule 35C3 Fahrplan 35C3 Lightning Talsk 35C3 Streaming 35C3 Event Blog 35C3 Media 35C3 Assemblies Projects at 35C3 35C3 at confwatch Created: 2018-06-10 Updated: 2018-06-10","title":"Links"}]}